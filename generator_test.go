package SimpleGenerator

import (
	"bytes"
	"os"
	"path/filepath"
	"strings"
	"testing"
)

////////////////////////////////////////////////////////////////

func TestNewFile(t *testing.T) {
	initialDir, err := os.Getwd()
	if err != nil {
		t.Fatalf("could not get current directory: %s", err)
	}

	gen := NewFile("testPackage")
	if gen == nil {
		t.Fatalf("NewFile returned nil")
	}
	if gen.path != initialDir {
		t.Errorf("expected path %s; got %s", initialDir, gen.path)
	}
	if gen.name != "testPackage" {
		t.Errorf("expected package name 'testPackage'; got %s", gen.name)
	}
}

func TestNewFilePath(t *testing.T) {
	testPath := "/tmp/testpath"
	expectedFolder := "testpath"

	gen := NewFilePath(testPath)
	if gen == nil {
		t.Fatalf("NewFilePath returned nil")
	}
	if gen.name != expectedFolder {
		t.Errorf("expected folder name '%s'; got %s", expectedFolder, gen.name)
	}
	if gen.path != filepath.Dir(testPath) {
		t.Errorf("expected path %s; got %s", filepath.Dir(testPath), gen.path)
	}
}

func TestRender(t *testing.T) {
	gen := NewFile("testPackage")
	buf := new(bytes.Buffer)

	err := gen.Render(buf)
	if err != nil {
		t.Fatalf("Render failed: %s", err)
	}

	expectedOutput := `/**  This file is automatically generated  **/

package ` + gen.name + `

` + strings.Repeat("//", 32) + `

`
	if buf.String() != expectedOutput {
		t.Errorf("expected output %s; got %s", expectedOutput, buf.String())
	}
}

func TestSave(t *testing.T) {
	dir := os.TempDir()
	defer os.RemoveAll(dir)

	gen := NewFile("testPackage")
	gen.path = dir

	filename := "output.go"
	if err := gen.Save(filename); err != nil {
		t.Fatalf("Save failed: %s", err)
	}

	outputPath := filepath.Join(dir, filename)
	if _, err := os.Stat(outputPath); os.IsNotExist(err) {
		t.Fatalf("file %s was not created", outputPath)
	}
}
